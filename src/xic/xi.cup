package xic;

import java_cup.runtime.*;
import java_cup.runtime.ComplexSymbolFactory.ComplexSymbol;
   
/* Parser code to change the way the parser reports errors (include
   line and column number of the error). */
parser code {:
    
    /* Change the method report_error so it will display the line and
       column of where the error occurred in the input as well as the
       reason for the error which is passed into the method in the
       String 'message'. */

    public void syntax_error(Symbol cur_token) {
        ComplexSymbol tok = (ComplexSymbol) cur_token;
        String line = String.format("%d:%d error:Unexpected token %s", tok.getLeft().getLine(), tok.getLeft().getColumn(), tok.getName());
        throw new Error(line);
    }
    public void report_error(String message, Object info) {
   
        /* Create a StringBuilder called 'm' with the string 'Error' in it. */
        StringBuilder m = new StringBuilder("Error");
   
        /* Check if the information passed to the method is the same
           type as the type java_cup.runtime.Symbol. */
        if (info instanceof java_cup.runtime.Symbol) {
            /* Declare a java_cup.runtime.Symbol object 's' with the
               information in the object info that is being typecasted
               as a java_cup.runtime.Symbol object. */
            java_cup.runtime.Symbol s = ((java_cup.runtime.Symbol) info);
   
            /* Check if the line number in the input is greater or
               equal to zero. */
            if (s.left >= 0) {                
                /* Add to the end of the StringBuilder error message
                   the line number of the error in the input. */
                m.append(" in line "+(s.left+1));   
                /* Check if the column number in the input is greater
                   or equal to zero. */
                if (s.right >= 0)                    
                    /* Add to the end of the StringBuilder error message
                       the column number of the error in the input. */
                    m.append(", column "+(s.right+1));
            }
        }
   
        /* Add to the end of the StringBuilder error message created in
           this method the message that was passed into this method. */
        m.append(" : "+message);
   
        /* Print the contents of the StringBuilder 'm', which contains
           an error message, out on a line. */
        /*System.out.println(m);*/
    }
   
    /* Change the method report_fatal_error so when it reports a fatal
       error it will display the line and column number of where the
       fatal error occurred in the input as well as the reason for the
       fatal error which is passed into the method in the object
       'message' and then exit.*/
    public void report_fatal_error(String message, Object info) {
        report_error(message, info);
        return;
        /*System.exit(1);*/
    }
:};
   

   
/* ------------Declaration of Terminals and Non Terminals Section----------- */
   
/* Terminals (tokens returned by the scanner).  

   Terminals that have no value are listed first and then terminals
   that do have an value, in this case an integer value, are listed on
   the next line down. */
terminal USE, IF, ELSE, WHILE, RETURN, LENGTH; 
terminal TRUE, FALSE, INT, BOOL;
terminal SEMI, COLON, COMMA, UNDERSCORE;
terminal PLUS, MINUS, MULTIPLY, DIVIDE, MOD;
terminal AND, OR, NEGATE;
terminal EQ, LT, GT, EQEQ, LEQ, GEQ, NEQ;
terminal LPAREN, RPAREN, LBRACE, RBRACE, LBRACKET, RBRACKET;

terminal String ID, STRING, CHARACTER;
terminal Integer INTEGER;
terminal UMINUS;
/* Non terminals used in the grammar section.  

   Non terminals that have an object value are listed first and then
   non terminals that have an integer value are listed.  An object
   value means that it can be any type, it isn't set to a specific
   type.  So it could be an Integer or a String or whatever. */

non terminal AtomSExp id, integer;
non terminal SExp assign, assignment, id_bracket;


non terminal SExp                type,                id_type,                 expr;
non terminal SExp comma_seperate_type, comma_seperate_id_type,  comma_seperate_expr;   
non terminal SExp       array_of_type,       array_of_id_type,        array_of_expr;


non terminal SExp         func,          stmt,         bracket,         use_stmt;
non terminal SExp list_of_func,  list_of_stmt, list_of_bracket, list_of_use_stmt;
non terminal SExp               block_of_stmt,                                    block_of_expr;

non terminal ListSExp program;

/*
  Precedence of non terminals could be defined here.  If you do define
  precedence here you won't need to worry about precedence in the
  Grammar Section, i.e. that TIMES should have a higher precedence
  than PLUS.
  
  The precedence defined here would look something like this where the
  lower line always will have higher precedence than the line before it.
   
  precedence left PLUS, MINUS; 
  precedence left TIMES, DIVIDE; 
*/

  precedence nonassoc ELSE;
  
  
  precedence left COMMA, EQ; 
  precedence left LT, GT, LEQ, GEQ, EQEQ, NEQ;
  precedence left PLUS, MINUS;
  precedence left MULTIPLY, DIVIDE, MOD, LPAREN, LBRACE;
  precedence left AND, OR, NEGATE; 
  precedence left UMINUS;



/* ----------------------------Grammar Section-------------------- */
   
/* The grammar for our parser.
   
   program ::= use_stmt_list expr_list

*/
start with program;

id      ::= ID:x                        {: RESULT = new AtomSExp(x); :};
integer ::= INTEGER:x                   {: RESULT = new AtomSExp(x); :};
type    ::= BOOL                        {: RESULT = new AtomSExp("bool"); :}
          | INT                         {: RESULT = new AtomSExp("int"); :}
          | INT LBRACKET RBRACKET
          {: RESULT = new ListSExp(new AtomSExp("[]"), new AtomSExp("int")); :}
          | INT LBRACKET expr:e RBRACKET
          {: RESULT =  new ListSExp(new AtomSExp("[]"), new AtomSExp("int"), e); :}
          | INT LBRACKET RBRACKET LBRACKET RBRACKET
          {: RESULT =  new ListSExp(new AtomSExp("[]"), new ListSExp(new AtomSExp("[]"), new AtomSExp("int"))); :}         
          | INT LBRACKET expr:e RBRACKET LBRACKET RBRACKET
          {: RESULT =  new ListSExp(new AtomSExp("[]"), new ListSExp(new AtomSExp("[]"), new AtomSExp("int")), e); :}
          | INT LBRACKET expr:e1 RBRACKET LBRACKET expr:e2 RBRACKET
          {: RESULT =  new ListSExp(new AtomSExp("[]"), new ListSExp(new AtomSExp("[]"), new AtomSExp("int"), e2), e1); :}
          ;

id_bracket ::= id:x LBRACKET RBRACKET
          {: RESULT = new ListSExp(new AtomSExp("[]"), x); :}
          | id:x LBRACKET expr:e RBRACKET
          {: RESULT =  new ListSExp(new AtomSExp("[]"), x, e); :}
          | id:x LBRACKET RBRACKET LBRACKET RBRACKET
          {: RESULT =  new ListSExp(new AtomSExp("[]"), new ListSExp(new AtomSExp("[]"), x)); :}         
          | id:x LBRACKET expr:e RBRACKET LBRACKET RBRACKET
          {: RESULT =  new ListSExp(new AtomSExp("[]"), new ListSExp(new AtomSExp("[]"), x), e); :}
          | id:x LBRACKET expr:e1 RBRACKET LBRACKET expr:e2 RBRACKET
          {: RESULT =  new ListSExp(new AtomSExp("[]"), new ListSExp(new AtomSExp("[]"), x, e2), e1); :}
          ;
          
id_type ::= id:x COLON type:t           {: RESULT = new ListSExp(x, t); :}
          | UNDERSCORE                  {: RESULT = new AtomSExp("_"); :}
          ;

expr ::= expr:e1 PLUS expr:e2         {: RESULT = new ListSExp("+", e1, e2); :}
       | MINUS expr:e                 {: RESULT = new ListSExp("-", e); :} %prec UMINUS
	   | expr:e1 MINUS expr:e2        {: RESULT = new ListSExp("-", e1, e2); :}
	   | expr:e1 MULTIPLY expr:e2     {: RESULT = new ListSExp("*", e1, e2); :}
       | expr:e1 DIVIDE expr:e2       {: RESULT = new ListSExp("/", e1, e2); :}
	   | expr:e1 MOD expr:e2          {: RESULT = new ListSExp("%", e1, e2); :}
	   | expr:e1 LT expr:e2           {: RESULT = new ListSExp("<", e1, e2); :}
	   | expr:e1 GT expr:e2           {: RESULT = new ListSExp(">", e1, e2); :}
	   | expr:e1 EQEQ expr:e2         {: RESULT = new ListSExp("==", e1, e2); :}
	   | expr:e1 LEQ expr:e2          {: RESULT = new ListSExp("<=", e1, e2); :}
	   | expr:e1 GEQ expr:e2          {: RESULT = new ListSExp(">=", e1, e2); :}
	   | expr:e1 NEQ expr:e2          {: RESULT = new ListSExp("!=", e1, e2); :}
	   | expr:e1 AND expr:e2          {: RESULT = new ListSExp("&", e1, e2); :}
       | expr:e1 OR expr:e2           {: RESULT = new ListSExp("|", e1, e2); :}
	   | LENGTH LPAREN expr:e RPAREN  {: RESULT = new ListSExp("length", e); :}
	   | LPAREN expr:e RPAREN         {: RESULT = e; :}
	   | id:x array_of_expr:el        {: ((ListSExp) el).prepend(x); RESULT = el; :}
	   | id:x LPAREN RPAREN           {: RESULT = new ListSExp(x); :}
	   | id_bracket:x                 {: RESULT = x; :}
	   | STRING:s                     {: RESULT = new AtomSExp('"' + s + '"'); :}
	   | CHARACTER:c                  {: RESULT = new AtomSExp("'" + c + "'"); :}
	   | TRUE                         {: RESULT = new AtomSExp("true"); :}
	   | FALSE                        {: RESULT = new AtomSExp("false"); :}
	   | integer:e                    {: RESULT = e; :}
	   | id:x                         {: RESULT = x; :}
	   | NEGATE expr:e                {: RESULT = new ListSExp("!", e); :}
	   | block_of_expr:e              {: RESULT = e; :}
	   ;



comma_seperate_expr ::= comma_seperate_expr:el COMMA expr:e           
                         {: 
                            if(el instanceof ListSExp) { 
                                ((ListSExp) el).add(e); 
                                RESULT = el;
                            } else { 
                                RESULT = new ListSExp(el, e);
                            }
                         :}
                         | expr:e {: RESULT = new AtomSExp(e); :}
                         ;

comma_seperate_type    ::= comma_seperate_type:el COMMA type:e
                         {: 
                            if(el instanceof ListSExp) { 
                                ((ListSExp) el).add(e); 
                                RESULT = el;
                            } else { 
                                RESULT = new ListSExp(el, e);
                            }
                         :}
                         | type:e {: RESULT = new AtomSExp(e); :}
                         ;
                           
comma_seperate_id_type ::= comma_seperate_id_type:el COMMA id_type:e  
                         {: 
                            if(el instanceof ListSExp) { 
                                ((ListSExp) el).add(e); 
                                RESULT = el;
                            } else { 
                                RESULT = new ListSExp(el, e);
                            }
                         :}
                         | id_type:e {: RESULT = new AtomSExp(e); :}
                         ;

block_of_expr    ::= LBRACE comma_seperate_expr:el RBRACE
                    {: if(el instanceof ListSExp) RESULT = el; else RESULT = new ListSExp(el); :}
                    ;
                    
array_of_expr    ::= LPAREN comma_seperate_expr:el RPAREN
                     {: if(el instanceof ListSExp) RESULT = el; else RESULT = new ListSExp(el); :};
                     
array_of_type    ::= LPAREN comma_seperate_type:el RPAREN
                     {: if(el instanceof ListSExp) RESULT = el; else RESULT = new ListSExp(el); :};

array_of_id_type ::= LPAREN comma_seperate_id_type:el RPAREN                             
                     {: if(el instanceof ListSExp) RESULT = el; else RESULT = new ListSExp(el); :}; 


assign     ::= EQ expr:e             {: RESULT = e; :};

assignment ::= id_bracket:el assign:e //could not reduce to ID
         {: RESULT =  new ListSExp("=", el, e); :}
         |
         id:el assign:e //could not reduce to ID
         {: RESULT =  new ListSExp("=", el, e); :}         
         |
         comma_seperate_id_type:el assign:e //could not reduce to ID
         {: RESULT = new ListSExp("=", el, e); :}
         ;

stmt ::= IF LPAREN expr:predicate RPAREN block_of_stmt:consequent ELSE block_of_stmt:alternative
         {: RESULT = new ListSExp("if", predicate, consequent, alternative); :}
         |
         IF LPAREN expr:predicate RPAREN assignment:consequent ELSE assignment:alternative
         {: RESULT = new ListSExp("if", predicate, consequent, alternative); :}
         |
         IF LPAREN expr:predicate RPAREN block_of_stmt:consequent ELSE assignment:alternative
         {: RESULT = new ListSExp("if", predicate, consequent, alternative); :}
         |  
         IF LPAREN expr:predicate RPAREN block_of_stmt:consequent
         {: RESULT = new ListSExp("if", predicate, consequent); :}
         |
         WHILE LPAREN expr:predicate RPAREN block_of_stmt:consequent
         {: RESULT = new ListSExp("while", predicate, consequent); :}
         |
         stmt:x SEMI {: RESULT = x; :}
         |
         expr:x {: RESULT = x; :}
         |
         assignment:e {: RESULT = e; :}
         |
         comma_seperate_id_type:el {: RESULT = el; :}
         ;

block_of_stmt ::= LBRACE list_of_stmt:el RBRACE               {: RESULT = el; :}
                | LBRACE list_of_stmt:el RETURN comma_seperate_expr:e RBRACE
                {: 
                    if(e instanceof ListSExp) { 
                        ((ListSExp) e).prepend(new AtomSExp("return"));  
                        ((ListSExp) el).add(e); 
                        RESULT = el;
                    } else { 
                        ((ListSExp) el).add(new ListSExp(new AtomSExp("return"), e));
                        RESULT = el;
                    } 
                :}
                | LBRACE list_of_stmt:el RETURN comma_seperate_expr:e SEMI RBRACE
                {: 
                    if(e instanceof ListSExp) { 
                        ((ListSExp) e).prepend(new AtomSExp("return"));  
                        ((ListSExp) el).add(e); 
                        RESULT = el;
                    } else { 
                        ((ListSExp) el).add(new ListSExp(new AtomSExp("return"), e));
                        RESULT = el;
                    } 
                :}
                ;

list_of_stmt ::= list_of_stmt:el stmt:e {: ((ListSExp) el).add(e); RESULT = el; :}
              |                         {: RESULT = new ListSExp(); :}
              ;


list_of_bracket ::= list_of_bracket:el bracket:e 
                           {: ((ListSExp) el).add(e); RESULT = el; :}
                           | {: RESULT = new ListSExp(); :}
                           ;


bracket ::= LBRACKET expr:e RBRACKET {: RESULT = new ListSExp("[]", e); :}
          | LBRACKET RBRACKET {: RESULT = new AtomSExp("[]"); :}
          ;


use_stmt ::= USE id:x    {: RESULT = new ListSExp("use", x); :};
         

               
list_of_func ::= list_of_func:fl func:f
              {: ((ListSExp) fl).add(f); RESULT = fl; :}
              | 
              {: RESULT = new ListSExp(); :}
              ;        

list_of_use_stmt ::= list_of_use_stmt:ul use_stmt:u    {: ((ListSExp) ul).add(u); RESULT = ul; :}
                  |                                    {: RESULT = new ListSExp(); :}
                  ;

func ::= id:x array_of_id_type:el1 block_of_stmt:el2
         {: RESULT = new ListSExp(x, el1, new ListSExp(), el2); :}
         |
         id:x LPAREN RPAREN block_of_stmt:el2
         {: RESULT = new ListSExp(x, new ListSExp(), new ListSExp(), el2); :}
         |
         id:x array_of_id_type:el1 COLON comma_seperate_type:el2 block_of_stmt:el3
         {: 
            if(el2 instanceof ListSExp) { 
                RESULT = new ListSExp(x, el1, el2, el3); 
            } else { 
                RESULT = new ListSExp(x, el1, new ListSExp(el2), el3);
            } 
         :}
         |
         id:x LPAREN RPAREN COLON comma_seperate_type:el2 block_of_stmt:el3
         {: RESULT = new ListSExp(x, new ListSExp(), el2, el3); :}
         ;



program ::= list_of_use_stmt:ul list_of_func:funcl
            {: RESULT = new ListSExp(ul, funcl); :};
         